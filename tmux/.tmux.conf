# tmux version
run-shell "tmux set-environment -g VER_MAJ $(tmux -V | cut -c6- | cut -d. -f1)"
run-shell "tmux set-environment -g VER_MIN $(tmux -V | cut -d. -f2)"

# Set the prefix to C-t when remote
if '[[ $SSH_CONNECTION ]]' \
   'unbind C-b ; set -g prefix C-t ; bind C-t send-prefix'

# For nested tmux sessions.
# Ex: ^b b d to detach the inner tmux session
bind b send-prefix

# Scrolling limit
set -g history-limit 11000

# UTF-8
if '(( VER_MAJ < 2 || VER_MIN < 2 ))' 'set -g utf8 on; set -g status-utf8 on'

# No Vim modes switching delay
set -s escape-time 0

# Colors
set-option -g default-terminal screen-256color
set-option -ga terminal-overrides ",*256col*:Tc"
# https://github.com/kurkale6ka/scripts/blob/master/colors_tmux.bash

## Terminal options
set -g set-titles on
set -g set-titles-string '#T'

# Focus events enabled for terminals that support them
set -g focus-events on

# Generate xterm-style key sequences (Shift, Alt or Ctrl indicated by a number)
setw -g xterm-keys on

## Mouse
if '(( VER_MAJ == 2 && VER_MIN > 0 ))' \
   'set -g mouse on' \
   'set -g mode-mouse on ; set -g mouse-resize-pane on ; set -g mouse-select-pane on ; set -g mouse-select-window on'

# Mouse scrolling fix for tmux > 2.1
bind -n WheelUpPane if -F -t = "#{mouse_any_flag}" "send-keys -M; send-keys -M; send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M; send-keys -M; send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M; send-keys -M; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M \; send-keys -M \; send-keys -M

## Status line
# Background color
if '[[ $SSH_CONNECTION ]]' \
   'set -g status-bg colour22' \
   'set -g status-bg colour4'

# Left
set -g status-left-length 27
set -g status-left '#[fg=white]#S#{?client_readonly, [RO],}#(~/.tmux/nb_sessions)#[default] ❭ #[fg=colour11,bold]#{?pane_synchronized,SYNC #[default]❭ ,}'

# Right
if '[[ $SSH_CONNECTION ]]' \
   "set -g status-right '#{?client_prefix,C-t ,}#[fg=white]#(echo $USER) @ #h'" \
   "set -g status-right '#{?client_prefix,C-b ,}#[fg=white]%a %d %b#[default]'"

## Windows and panes
set -g automatic-rename on
set -g renumber-windows on

bind m command-prompt -p'Rename window:' "rename-window '%1'"

# Window status line
#        .- #I: index
#       /    .-- #W: window
#      /    /
# Ex: 3:staging-
#               \
#                *- #F: flag
setw -g window-status-format '#[fg=cyan]#I:#[default]#W#[fg=white,bold]#F'
setw -g window-status-current-format '#[fg=cyan,bold]#I#[default,fg=cyan]:#[default,bg=colour5,fg=white,bold]#W#[default,fg=white,bold]#F'

set -g base-index 1
set -g pane-base-index 1

# window selection
bind -n C-right next-window
bind -n C-left  previous-window

# # TODO
# bind -n C-1 select-window -t1
# bind -n C-2 select-window -t2
# bind -n C-3 select-window -t3
# bind -n C-4 select-window -t4
# bind -n C-5 select-window -t5
# bind -n C-6 select-window -t6
# bind -n C-7 select-window -t7
# bind -n C-8 select-window -t8
# bind -n C-9 select-window -t9

# create new window
bind -n C-up new-window

# Splitting
bind v split-window -h; bind -n M-v split-window -h
bind h split-window -v; bind -n M-h split-window -v

# find window (^_ is ^/ in most terminals)
bind -n C-_ command-prompt "find-window '%%'"

# Panes
set -g pane-border-fg colour245
set -g pane-active-border-fg colour205

# pane selection
bind -n M-right select-pane -R
bind -n M-left  select-pane -L
bind -n M-up    select-pane -U
bind -n M-down  select-pane -D

bind -n M-1 select-pane -t1
bind -n M-2 select-pane -t2
bind -n M-3 select-pane -t3
bind -n M-4 select-pane -t4
bind -n M-5 select-pane -t5
bind -n M-6 select-pane -t6
bind -n M-7 select-pane -t7
bind -n M-8 select-pane -t8
bind -n M-9 select-pane -t9

bind \ setw synchronize-panes

# Switch to previous window
if '[[ $SSH_CONNECTION ]]' \
   'bind C-t last-window' \
   'bind C-b last-window; bind -n C-down last-window'

# zoom pane
bind -n M-enter resize-pane -Z

## Copy mode
setw -g mode-keys vi

bind Escape copy-mode

if '(( VER_MAJ >= 2 && VER_MIN >= 4 ))' \
   'bind -T copy-mode-vi v send -X begin-selection' \
   'bind -t vi-copy v begin-selection'

# Use y/Enter to copy to the clipboard (^v to paste)
# or cat to /tmp/out if X isn't running
# if 'xset q &> /dev/null' \
#    "bind -t vi-copy y copy-pipe 'xclip -in -selection clipboard' ; bind -t vi-copy Enter copy-pipe 'xclip -in -selection clipboard'" \
#    "bind -t vi-copy y copy-pipe 'cat > /tmp/out' ; bind -t vi-copy Enter copy-pipe 'cat > /tmp/out'"

if '(( VER_MAJ >= 2 && VER_MIN >= 4 ))' \
   'bind -T copy-mode-vi Y send -X copy-end-of-line; bind -T copy-mode-vi C-v send -X rectangle-toggle' \
   'bind -t vi-copy Y copy-end-of-line; bind -t vi-copy C-v rectangle-toggle'

## Custom scripts
bind l command-prompt -p'Common host prefix:,Range or number of hosts (default: 1-3):' "run 'lay %1 %2'"

## Configuration reload

# Note: without the \, the message wouldn't be part of the binding
#       but simply executed once for a configuration load
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# vim: foldmethod=expr foldexpr=getline(v\:lnum)=~'^##'?'>1'\:'='
