# Version
run 'tmux set-environment -g TMUX_VER $(tmux -V | grep -o "[0-9]\+\.[0-9]\+")'

# Set the prefix to C-t when remote
if '[[ $SSH_CONNECTION ]]' \
   'unbind C-b; set -g prefix C-t; bind C-t send-prefix'

# For nested tmux sessions.
# Ex: ^b b d to detach the inner tmux session
bind b send-prefix

# Scrolling limit
set -g history-limit 11000

# UTF-8
if '(( $(bc <<< "$TMUX_VER < 2.2") ))' \
   'set -g utf8 on; set -g status-utf8 on'

# No Vim modes switching delay
set -s escape-time 0

# Colors
set-option -g default-terminal screen-256color
set-option -ga terminal-overrides ",*256col*:Tc"
# https://github.com/kurkale6ka/scripts/blob/master/colors_tmux.bash

## Terminal options
set -g set-titles on
set -g set-titles-string '#T'

# Focus events enabled for terminals that support them
if '(( $(bc <<< "$TMUX_VER > 1.9") ))' \
   'set -g focus-events on'

# Generate xterm-style key sequences (Shift, Alt or Ctrl indicated by a number)
setw -g xterm-keys on

## Mouse
if '(( $(bc <<< "$TMUX_VER > 2") ))' \
   'set -g mouse on'

# Faster (3 lines at a time) mouse scrolling
if '(( $(bc <<< "$TMUX_VER >= 2.4") ))' ' \
   bind -Tcopy-mode WheelUpPane send -N3 -X scroll-up; \
   bind -Tcopy-mode WheelDownPane send -N3 -X scroll-down'

## Status line
# Background color
if '[[ $SSH_CONNECTION ]]' \
   'set -g status-bg colour22' \
   'set -g status-bg colour4'

# left and right
set -g status-left-length 27

if '[[ $SSH_CONNECTION ]]' ' \
   set -g status-left "#[fg=white]#S#[default] ❭"; \
   set -g status-right "#[fg=white]%a %d %b#[default]"' ' \
   set -g status-left "#[fg=white]#S#{?client_readonly, [RO],}#(~/.tmux/nb_sessions)#[default] ❭ "; \
   set -g status-right "#{?client_prefix,C-b ,}#[fg=white]%a %d %b#[default]"'

## Windows and panes
set -g automatic-rename on

if '(( $(bc <<< "$TMUX_VER > 1.6") ))' \
   'set -g renumber-windows on'

bind m command-prompt -p'Rename window:' "rename-window '%1'"

# Window status line
#        .- #I: index
#       /    .-- #W: window
#      /    /
# Ex: 3:staging-
#               \
#                *- #F: flag
setw -g window-status-format '#[fg=cyan]#I:#[fg=colour11]#{?pane_synchronized,##,}#[default]#W#[fg=white,bold]#F'
setw -g window-status-current-format '#[fg=cyan,bold]#I#[default,fg=cyan]:#[fg=colour11]#{?pane_synchronized,##,}#[default,bg=colour5,fg=white,bold]#W#[default,fg=white,bold]#F'

set -g base-index 1
set -g pane-base-index 1

# window selection
bind -n C-right next-window
bind -n C-left  previous-window

# create new window
bind -n C-up new-window

# Splitting
bind v split-window -h; bind -n M-v split-window -h
bind h split-window -v; bind -n M-h split-window -v

# find window (^_ is ^/ in most terminals)
bind -n C-_ command-prompt "find-window '%%'"

# Panes
if '(( $(bc <<< "$TMUX_VER > 1.9") ))' ' \
   set -g pane-border-style fg=colour245; \
   set -g pane-active-border-style fg=colour205'

# pane selection
bind -n M-right select-pane -R
bind -n M-left  select-pane -L
bind -n M-up    select-pane -U
bind -n M-down  select-pane -D

bind -n M-1 select-pane -t1
bind -n M-2 select-pane -t2
bind -n M-3 select-pane -t3
bind -n M-4 select-pane -t4
bind -n M-5 select-pane -t5
bind -n M-6 select-pane -t6
bind -n M-7 select-pane -t7
bind -n M-8 select-pane -t8
bind -n M-9 select-pane -t9

bind '\' setw synchronize-panes

# Switch to previous window
if '[[ $SSH_CONNECTION ]]' \
   'bind C-t last-window' \
   'bind C-b last-window'

# zoom pane
if '(( $(bc <<< "$TMUX_VER > 1.7") ))' \
   'bind -n M-enter resize-pane -Z'

## Copy mode
setw -g mode-keys vi

bind Escape copy-mode

# char/block wise selections + copy to $
# note: use C-v to toggle once v was used
if '(( $(bc <<< "$TMUX_VER > 2.3") ))' ' \
   bind -T copy-mode-vi v send -X begin-selection; \
   bind -T copy-mode-vi C-v send -X rectangle-toggle; \
   bind -T copy-mode-vi Y send -X copy-end-of-line'

if '(( $(bc <<< "$TMUX_VER <= 2.3") ))' ' \
   bind -t vi-copy v begin-selection; \
   bind -t vi-copy C-v rectangle-toggle; \
   bind -t vi-copy Y copy-end-of-line'

## Configuration reload
bind r source-file ~/.tmux.conf\; display-message "Config reloaded..."

# vim: foldmethod=expr foldexpr=getline(v\:lnum)=~'^##'?'>1'\:'='
