# Set the prefix to C-t when remote
if '[[ $SSH_CONNECTION ]]' \
   'unbind C-b ; set -g prefix C-t ; bind C-t send-prefix'

# For nested tmux sessions.
# Ex: ^b b d to detach the inner tmux session
bind b send-prefix

# Scrolling limit
set -g history-limit 11000

# UTF-8
set -g utf8 on
set -g status-utf8 on

# No Vim modes switching delay
set -s escape-time 0

# Focus events enabled for terminals that support them
set -g focus-events on

## Mouse
set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-pane on
set -g mouse-select-window on

## Status line
# Background color
if '[[ $SSH_CONNECTION ]]' \
   'set -g status-bg colour22' \
   'set -g status-bg colour4'

# Left
set -g status-left-length 27
set -g status-left '#[fg=white]#S#{?client_readonly, [RO],}#(~/.tmux/nb_sessions)#[default] ❭#[fg=colour11,bold]#{?pane_synchronized, SYNC #[default]❭,}'

# Right
if '[[ $SSH_CONNECTION ]]' \
   "set -g status-right '#{?client_prefix,C-t ,}#[fg=white]#(echo $USER) @ #h'" \
   "set -g status-right '#{?client_prefix,C-b ,}#[fg=white]%a %d %b#[default]'"

## Windows and panes
set -g automatic-rename on
set -g renumber-windows on

bind m command-prompt -p'Rename window:' "rename-window '%1'"

# Window status line
#        .- #I: index
#       /    .-- #W: window
#      /    /
# Ex: 3:staging-
#               \
#                *- #F: flag
setw -g window-status-format '#[fg=cyan]#I:#[default]#W#[fg=white,bold]#F'
setw -g window-status-current-format '#[fg=cyan,bold]#I#[default,fg=cyan]:#[default,bg=colour5,fg=white,bold]#W#[default,fg=white,bold]#F'

set -g base-index 1
set -g pane-base-index 1

bind -n C-right next-window
bind -n C-left  previous-window

# Splitting
bind v split-window -h
bind h split-window -v

# Panes
set -g pane-border-fg colour245
set -g pane-active-border-fg colour205

bind -n M-right select-pane -R
bind -n M-left  select-pane -L
bind -n M-up    select-pane -U
bind -n M-down  select-pane -D

bind \ setw synchronize-panes
if '[[ $SSH_CONNECTION ]]' \
   'bind C-t last-window' \
   'bind C-b last-window'

## Copy mode
setw -g mode-keys vi

bind Escape copy-mode

bind -t vi-copy v begin-selection

# Use y/Enter to copy to the clipboard (^v to paste)
# or cat to /tmp/out if X isn't running
if 'xset q &> /dev/null' \
   "bind -t vi-copy y copy-pipe 'xclip -in -selection clipboard' ; bind -t vi-copy Enter copy-pipe 'xclip -in -selection clipboard'" \
   "bind -t vi-copy y copy-pipe 'cat > /tmp/out' ; bind -t vi-copy Enter copy-pipe 'cat > /tmp/out'"

bind -t vi-copy Y copy-end-of-line
bind -t vi-copy C-v rectangle-toggle

## Custom scripts
bind l command-prompt -p'Common host prefix:,Range or number of hosts (default: 1-3):' "run 'lay %1 %2'"

## Colors

# # \x1b is Esc, 38 is extended fg set
# esc='\x1b[38;5;%sm'
# for i in {0..42}
# do
#    printf "$esc%-9s $esc%-9s $esc%-10s $esc%-11s" "$i"          color"$i"          \
#                                                   "$((i+43))"   color"$((i+43))"   \
#                                                   "$((i+43*2))" color"$((i+43*2))" \
#                                                   "$((i+43*3))" color"$((i+43*3))"
#    if ((i+43*5 < 256))
#    then
#       printf "$esc%-10s $esc%-11s\n" "$((i+43*4))" color"$((i+43*4))" \
#                                      "$((i+43*5))" color"$((i+43*5))"
#    else
#       printf "$esc%-10s\n" "$((i+43*4))" color"$((i+43*4))"
#    fi
# done
# tput sgr0

## Configuration reload

# Note: without the \, the message wouldn't be part of the binding
#       but simply executed once for a configuration load
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# vim: foldmethod=expr foldexpr=getline(v\:lnum)=~'^##'?'>1'\:'='
