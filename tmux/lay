#! /usr/bin/env zsh

# Usage:
#    lay
#    lay host_prefix
#    lay host_prefix number_of_hosts
#    lay host_prefix range (default: 1-3)
#    lay host1 host2 ... hostn

# needed for outputting colors with cecho
if [[ -d $XDG_CONFIG_HOME/zsh/autoload ]]
then
   fpath=($XDG_CONFIG_HOME/zsh/autoload $XDG_CONFIG_HOME/zsh/autoload/*(/) $fpath)
   autoload $XDG_CONFIG_HOME/zsh/autoload/**/[^_]*(.:t)
fi

if [[ $1 == -(h|-h)* ]]
then
cat << 'HELP'
Usage:
   lay
   lay host_prefix
   lay host_prefix number_of_hosts
   lay host_prefix range (default: 1-3)
   lay host1 host2 ... hostn
HELP
exit 0
fi

nb_sessions="$(tmux ls -F#S 2>/dev/null | wc -l)"

#  lay             lay prefix num
#  lay prefix  OR  lay prefix range
if (($# <= 1)) || { (($# == 2)) && [[ $2 == [0-9]* || $2 == [0-9]*-[0-9]* ]]; }
then
   if (($# == 0))
   then
      read 'prefix?Common host prefix: '
      read 'range?Range or number of hosts (ex: [1-]3): '
   else
      if [[ $2 == [01] ]]
      then
         cecho -fred 'Abort. Number > 1 expected' 1>&2
         exit 1
      fi
      prefix=$1
      range=${2:-1-3}
   fi

   _prefix=$prefix

   [[ $range != *-* ]] && range=1-$range

   _win_name=${prefix}_$range
   cset -fpink:205 _wn $_win_name

   if tmux lsw -F'#W' | grep -q $_win_name
   then
      echo "A window named $_wn already exists! Selecting it." 1>&2
      [[ -z $TMUX ]] && tmux attach
      tmux select-window -t $_win_name
      exit 2
   fi

   range_start=${range%-*}
   range_end=${range#*-}

   nb_hosts="$((range_end - range_start + 1))"

   if ((nb_hosts < 2))
   then
      cecho -fred 'Invalid range. Number of hosts must be > 1' 1>&2
      exit 3
   elif ((nb_hosts > 10))
   then
      cset -sfred _nb_hosts $nb_hosts
      read "answer?Are you sure you want to create $_nb_hosts panes? (y/n) "
      [[ $answer == n* ]] && exit 4
   fi

   # Create a new session named 'tiles'
   ((nb_sessions == 0)) && tmux new -s 'tiles' -d

   ssh_hosts=(${_prefix}$range_start)

   # Create a new window named ${prefix}_$range within the current session
   tmux new-window -n $_win_name "ssh ${_prefix}$range_start"

   for ((i = range_start + 1; i < range_end + 1; i++))
   do
      ssh_hosts+=(${_prefix}$i)

      tmux split-window -t $_win_name -h "ssh ${_prefix}$i"

      # Start tiling from the 4th pane since 2 is ok and 3 is a special case
      ((i < range_start + 3)) && continue
      # I can't move this after the loop because after a few hosts, splitting fails with:
      # 'create pane failed: pane too small'
      tmux select-layout -t $_win_name tiled
   done

# lay host1 host2 ... hostn
else

   # Create a new session named 'tiles'
   ((nb_sessions == 0)) && tmux new -s 'tiles' -d

   _prefix='multi'

   if tmux lsw -F'#W' | grep -qE '^(multi|multi_[1-9][0-9]*)$'
   then
      _nb="$(tmux lsw -F'#W' | grep -E '^multi_[1-9][0-9]*$' | cut -c'7-' | sort -n | tail -n1)"
      if ((_nb))
      then
         _win_name=${_prefix}_$((++_nb))
      else
         _win_name=${_prefix}_1
      fi
   else
      _win_name=$_prefix
   fi

   ssh_hosts=($@)

   # Create a new window named 'multi' within the first running session
   tmux new-window -n $_win_name "ssh $1"

   j=2
   for h in ${@:2}
   do
      tmux split-window -t $_win_name -h "ssh $h"

      # Start tiling from the 4th pane since 2 is ok and 3 is a special case
      ((j++ < 4)) && continue
      tmux select-layout -t $_win_name tiled
   done
fi

# 3 hosts case: split the screen vertically in 3 equal panes
if { [[ $nb_hosts ]] && ((nb_hosts == 3)); } || { [[ ! $nb_hosts ]] && (($# == 3)); }
then
   tmux select-layout -t $_win_name even-horizontal
fi

tmux select-pane -t ${_win_name}.1
tmux set-window-option -t $_win_name synchronize-panes on

if ((nb_sessions == 0))
then
   tmux kill-window -t1
   tmux attach -t 'tiles'
   echo -n 'New tmux session: '
   cecho -fpink:205 "tiles:$_win_name.[${(j.,.)ssh_hosts}]"
else
   [[ -z $TMUX ]] && tmux attach
   cecho -fpink:205 "$_win_name.[${(j.,.)ssh_hosts}] "
fi
